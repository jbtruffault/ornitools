services:
  backend:
    container_name: ornitools_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    env_file: .env
    restart: always
    depends_on:
      - db
    networks:
      - ornitools
    volumes:
      - .env:/.env
      - media:/app/media

  db:
    container_name: ornitools_db
    restart: always
    image: postgres:13
    volumes:
      - dev-db-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - ornitools

  frontend:
    container_name: ornitools_frontend
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE_URL: /api/
    command: sh -c "npm run build && npm run start"
    networks:
      - ornitools
    volumes:
      - media:/app/media

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A core worker --loglevel=info
    restart: always
    env_file: .env
    depends_on:
      - redis
      - backend
    networks:
      - ornitools
    volumes:
      - media:/app/media

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A core beat --loglevel=info
    restart: always
    env_file: .env
    depends_on:
      - redis
      - backend
    networks:
      - ornitools
    volumes:
      - media:/app/media

  redis:
    image: redis:alpine
    restart: always
    networks:
      - ornitools

volumes:
  dev-db-data:
  media: ~

networks:
  ornitools:
    external: true
